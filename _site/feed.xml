<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-21T21:05:20+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">THE PRAYER OF JABEZ</title><subtitle>Oh, that you would bless me and enlarge my territory! Let your hand be with me, and keep me from harm so that I will be free from pain. - 1 Chronicles 4:10</subtitle><entry><title type="html">Redis Cluster tutorial 2 - configuration parameter</title><link href="http://localhost:4000/docs/redis/2018/10/21/redis-cluster-configuration-parameter.html" rel="alternate" type="text/html" title="Redis Cluster tutorial 2 - configuration parameter" /><published>2018-10-21T17:44:00+09:00</published><updated>2018-10-21T17:44:00+09:00</updated><id>http://localhost:4000/docs/redis/2018/10/21/redis-cluster-configuration-parameter</id><content type="html" xml:base="http://localhost:4000/docs/redis/2018/10/21/redis-cluster-configuration-parameter.html">&lt;p&gt;comes from &lt;a href=&quot;https://redis.io/topics/cluster-tutorial&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redis Cluster 에서 설정할 수 있는 설정값에 대해 알아볼 생각입니다. 해당 설정들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt; 에서 설정할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;cluster-enableed &amp;lt;yes/no&amp;gt;&lt;/strong&gt; : yes 일 경우에만 클러스터 지원이 됩니다. 그렇지 않은 경우 단독 인스턴스로 동작합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;cluster-config-file {filename}&lt;/strong&gt; : dsg&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">comes from here</summary></entry><entry><title type="html">Redis Cluster tutorial 1</title><link href="http://localhost:4000/docs/redis/2018/10/14/redis-cluster-tutorial.html" rel="alternate" type="text/html" title="Redis Cluster tutorial 1" /><published>2018-10-14T17:44:00+09:00</published><updated>2018-10-14T17:44:00+09:00</updated><id>http://localhost:4000/docs/redis/2018/10/14/redis-cluster-tutorial</id><content type="html" xml:base="http://localhost:4000/docs/redis/2018/10/14/redis-cluster-tutorial.html">&lt;p&gt;comes from &lt;a href=&quot;https://redis.io/topics/cluster-tutorial&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;시작하기&quot;&gt;시작하기&lt;/h3&gt;
&lt;p&gt;Redis Cluster 를 이해하기 위한 문서로, 어떻게 설정하는지, 테스트하는지, 조작하는지에 대한 설명입니다. 사용자 입장에서 Redis Cluster 가 어떻게 동작하는지에 대해 알아봅니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;h5 id=&quot;앞으로의-튜토리얼은-redis-version-30-or-higher-에서만-가능합니다&quot;&gt;앞으로의 튜토리얼은 Redis version 3.0 or higher 에서만 가능합니다.&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;redis-cluster-101-레디스-클러스터-소개&quot;&gt;Redis Cluster 101 레디스 클러스터 소개&lt;/h3&gt;
&lt;p&gt;여러 대의 레디스 인스턴스를 이용하여 &lt;strong&gt;자동 샤딩&lt;/strong&gt; 될 수 있도록 구성할 수 있습니다.&lt;/p&gt;

&lt;p&gt;파티셔닝된 레디스 인스턴스에 대해 &lt;strong&gt;일정 수준의 가용성&lt;/strong&gt; 을 제공합니다. (일부 노드가 실패하는 경우에도 조작이 가능하지만 다수의 실패가 발생하면 불가능합니다)&lt;/p&gt;

&lt;p&gt;즉, Redis Cluster 를 이용하면 아래와 같은 이점이 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자동으로 데이터를 분산&lt;/li&gt;
  &lt;li&gt;일부 노드가 사용불가능한 경우에도 운영 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;redis-cluster-tcp-ports-레디스-클러스터와-tcp-포트&quot;&gt;Redis Cluster TCP ports 레디스 클러스터와 TCP 포트&lt;/h3&gt;
&lt;p&gt;Redis Cluter 노드는 두 개의 TCP connection 을 필요로 합니다. 예를 들어 6379 port 는 클라이언트용, 16379 는 데이터용으로 사용됩니다.&lt;/p&gt;

&lt;p&gt;이 16379 포트는 &lt;em&gt;Cluster bus&lt;/em&gt; 로 이용되는데, 바이너리 프로토콜&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;을 이용한 노드끼리의 커뮤니케이션에 이용됩니다. 대략 아래의 작업을 위해 이용되고 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;노드의 실패 감지&lt;/li&gt;
  &lt;li&gt;설정 업데이트&lt;/li&gt;
  &lt;li&gt;복구 권한&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;주의점&quot;&gt;&lt;em&gt;주의점&lt;/em&gt;&lt;/h4&gt;
&lt;blockquote&gt;

  &lt;h5 id=&quot;1-클라이언트는-절대로-데이터-포트를-이용해서는-안됩니다-ex-16379&quot;&gt;1. 클라이언트는 절대로 데이터 포트를 이용해서는 안됩니다. (ex. 16379)&lt;/h5&gt;
  &lt;h5 id=&quot;2-클라이언트를-위한-포트와-클러스터-버스를-위한-포트의-갭은-고정값으로-항상-10000-입니다&quot;&gt;2. 클라이언트를 위한 포트와 클러스터 버스를 위한 포트의 갭은 고정값으로 항상 10000 입니다.&lt;/h5&gt;
  &lt;h5 id=&quot;3-클라이언트-포트는-모든-클라이언트에게-개방되어야-하고-추가로-다른-클러스터-노드들에게도-개방되어야-합니다-키-마이그레이션에-이용됩니다&quot;&gt;3. 클라이언트 포트는 모든 클라이언트에게 개방되어야 하고 추가로 다른 클러스터 노드들에게도 개방되어야 합니다. (키 마이그레이션에 이용됩니다)&lt;/h5&gt;
  &lt;h5 id=&quot;4-클러스터-버스-포트는-모든-다른-노드들에게-개방되어야-합니다&quot;&gt;4. 클러스터 버스 포트는 모든 다른 노드들에게 개방되어야 합니다.&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;redis-cluster-data-sharding-레디스-클러스터의-샤딩&quot;&gt;Redis Cluster data sharding 레디스 클러스터의 샤딩&lt;/h3&gt;
&lt;p&gt;Redis Cluster 는 consistent hashing 을 이용하지 않고 다른 형태의 샤딩을 이용는데, 모든 키는 &lt;strong&gt;hash slot&lt;/strong&gt; 을 일부라고 여깁니다.&lt;/p&gt;

&lt;p&gt;Redis Cluster 에는 16384 개의 hash slot 이 있고 hash slot 을 얻기 위해 &lt;em&gt;CRC16&lt;/em&gt; 을 이용해 16384의 나머지값&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;을 구합니다&lt;/p&gt;

&lt;p&gt;각 Redis node 는 hash slot 의 일부분을 책입집니다. 예를 들면,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Node A 는 hash slot 0 ~ 5500&lt;/li&gt;
  &lt;li&gt;Node B 는 5501 ~ 11000&lt;/li&gt;
  &lt;li&gt;Node C 는 11001 ~ 16383&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;노드가 추가/삭제 될 때 hash slot 만 이동하면 하면 되므로 쉽게 할 수 있습니다. hash slot 의 이동은 어떠한 정지 명령도 요구하지 않으므로 노드의 추가/삭제, hash slot 의 퍼센트 변경에 따른 다운타임이 없습니다.&lt;/p&gt;

&lt;p&gt;Redis Cluster 는 멀티키 지원을 하는데 하나의 명령으로 실행되는, 동일한 hash slot을 가지고 있는 키들끼리 가능합니다. 사용자는 &lt;strong&gt;hash tage&lt;/strong&gt; 를 이용해 다수의 키가 동일한 hash slot 을 가지도록 강제할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;키의 일부를 {} 로 감싸면 {} 안에 있는 문자만이 hash 됩니다.
즉 {foo}key 와 key{foo} 가 같은 hash slot 을 가지고 있다는 게 보장됩니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;redis-cluster-master-slave-model-레디스-클러스터의-마스터-슬레이브-모델&quot;&gt;Redis Cluster master-slave model 레디스 클러스터의 마스터-슬레이브 모델&lt;/h3&gt;
&lt;p&gt;일부 노드의 상태가 실패로 있거나 주노드와 커뮤니케이션이 불가능한 노드가 발생한 경우에도 운용이 가능하도록 하기 위해 Redis Cluster 는 마스터-슬레이브 모델을 이용합니다.&lt;/p&gt;

&lt;p&gt;위의 예제 중 Node B 가 더이상 이용 가능지 않은 상태일 때 5501 ~ 11000 의 hash slot 에 대한 정보 제공이 되지 않으므로 클러스터 이용이 불가능해 집니다.
그래서 클러스터가 생성될 때 마스터 노드에 대한 슬레이브 노드도 생성됩니다. 최종적으로 마스터 노드 &lt;em&gt;A, B, C&lt;/em&gt; 와 슬레이브 노드 &lt;em&gt;A1, B1, C1&lt;/em&gt; 이 존재합니다. B1 은 B 의 복제본으로 Node B 가 실패하는 경우 B1 이 마스터 노드가 되어 서비스를 제공합니다. 이 때 B, B1 이 동시에 실패하는 경우에는 Cluster 이용이 불가합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;redis-cluster-consistency-guarantees-레디스-클러스트의-일관성-보장&quot;&gt;Redis Cluster consistency guarantees 레디스 클러스트의 일관성 보장&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;강력한 일관성&lt;/strong&gt; 은 보장하지 않습니다. 특정한 상황에서 쓰기 조작이 유실될 수 있습니다.&lt;/p&gt;

&lt;p&gt;첫번째 이유 : Redis Cluster 는 비동기 복제를 이용하기 때문입니다. 쓰기 발생 시 아래와 같이 동작합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Node B 에 쓰기&lt;/li&gt;
  &lt;li&gt;클라이언트로 Node B 의 OK 응답&lt;/li&gt;
  &lt;li&gt;Node B 의 슬레이브 노드 B1, B2, B3 로의 쓰기 전파&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node B가 클라이언트에 응답하기 전 슬레이브 노드 B1, B2, B3 를 기다리지 않기 때문에 언제나 발생 가능한 상황입니다. Node B 에 쓰기 연산이 도착하고 Node B 는 클라이언트에게 응답합니다. 그리고 슬레이브로의 전파 전에 Node B 가 다운되면 해당 쓰기 조작이 일어나지 않은 슬레이브가 마스터로 승격됩니다. Node B 에 일어난 쓰기는 영원히 유실되는 것입니다.&lt;/p&gt;

&lt;p&gt;대부분의 데이터베이스를 사용하는 환경에서 데이터를 일정 시간(초) 단위로 disk 에 저장하도록 설정한 경우와 비슷한 상황이 발생됩니다. 해서 꼭 분산 처리 환경에서만 발생하는 상황은 아닙니다. 일관성을 높이기 위해 데이터베이스에서도 클라이언트에 응답하기 전 disk 저장을 보장하도록 설정할 수 있지만 이런 경우 성능 저하를 야기할 수 있습니다. Redis Cluster 에서 동기 복제를 이용하는 것과 동일한 설정입니다.&lt;/p&gt;

&lt;p&gt;성능 보장과 일관성 보장의 경우 한쪽은 어느 정도 포기해야 하는 부분이 있습니다. Redis Cluster 에서는 동기적으로 동작하도록 하기 위해서는  &lt;a href=&quot;https://redis.io/commands/wait&quot;&gt;WAIT&lt;/a&gt; 명령어로 구현될 수 있습니다. 쓰기 유실을 방지할 수 있는 방법이지만 Redis Cluster 는 동기 복제를 이용할 경우에도 특정 실패 상황에서는(슬레이브가 결국 복제 명령을 받지 못한 상태로 마스터로 승격) 데이터 유실이 발생할 수 있습니다.&lt;/p&gt;

&lt;p&gt;추가로 쓰기가 유실될 수 있는 상황은, 네트워크 분리상황입니다. 클라이언트가 더 적은 인스턴스를 가지고 있는 네트워크 단과만 (최소 하나 이상의 마스터 필요) 연결되어 있는 경우 쓰기 연산이 유실될 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어 A, B, C, A1, B1, C1 의 마스터 3대 슬레이브 3대가 있고 Z1 을 클라이언트라 가정했을 때 한 쪽에는 A, C, A1, B1, C1 이 있고 다른 한 쪽에는 B 와 Z1 가 있다고 가정해 봅니다.&lt;/p&gt;

&lt;p&gt;Z1 은 B 에 쓰기를 보낼 수 있으니 B 가 다른 네트워크 상에 있는 마스터들과의 파티션을 빠르게 처리하면 아무 문제가 없지만, 파티션 동작이 오래걸리는 경우, 즉 B1 이 마스터로 승격할 수 있을 정도로 오래 걸리는 경우 쓰기가 유실될 수 있습니다.&lt;/p&gt;

&lt;p&gt;Z1 이 B 에 보내는 쓰기 명령에 대해 &lt;strong&gt;maximum window&lt;/strong&gt; 가 존재하고, 더 많은 인스턴스를 가지고 있는 네트워크 단에서 슬레이브를 마스터로 승격할 수 있는 &lt;em&gt;충분한 시간&lt;/em&gt; 이 소요되면 더 적은 인스턴스를 가지고 있는 네트워크단의 모든 마스터 노드는 쓰기를 멈춥니다. 따라서 이 &lt;em&gt;충분한 시간&lt;/em&gt; 은 Redis Cluster 설정에서 매우 중요한 요소 입니다. 이를 &lt;strong&gt;node timeout&lt;/strong&gt; 이라고 합니다. &lt;em&gt;node timeout&lt;/em&gt; 이 발생하면 슬레이브 노드를 승격시키거나 승격할 노드가 없는 경우 error 상태로 변경되고 더 이상 쓰기가 불가능 해집니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;일부-클러스터-관련-이해를-위한-부분만-옮겼습니다&quot;&gt;&lt;em&gt;일부 클러스터 관련 이해를 위한 부분만 옮겼습니다.&lt;/em&gt;&lt;/h5&gt;
&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Cluster bus는 노드끼리의 데이터 교환을 위한 별도의 바이너리 프로토콜을 이용하는데 정보 교환시 더 적은 대역폭, 더 적은 시간이 소요되도록 맞춰진 프로토콜입니다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;(CRC16 으로 얻어진 값) % 16384 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">comes from here</summary></entry><entry><title type="html">Redis Partitioning</title><link href="http://localhost:4000/docs/redis/2018/10/13/redis-partitioning.html" rel="alternate" type="text/html" title="Redis Partitioning" /><published>2018-10-13T17:44:00+09:00</published><updated>2018-10-13T17:44:00+09:00</updated><id>http://localhost:4000/docs/redis/2018/10/13/redis-partitioning</id><content type="html" xml:base="http://localhost:4000/docs/redis/2018/10/13/redis-partitioning.html">&lt;p&gt;comes from &lt;a href=&quot;https://redis.io/topics/partitioning&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;partitioning-이론&quot;&gt;Partitioning 이론&lt;/h2&gt;

&lt;h3 id=&quot;partitioning-in-redis-serves-two-main-goals-레디스의-파티셔닝의-두-가지-주목적&quot;&gt;Partitioning in Redis serves two main goals: 레디스의 파티셔닝의 두 가지 주목적&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;It allows for much larger databases, using the sum of the memory of many computers. Without partitioning you are limited to the amount of memory a single computer can support.&lt;/li&gt;
    &lt;li&gt;It allows scaling the computational power to multiple cores and multiple computers, and the network bandwidth to multiple computers and network adapters.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;여러 대의 컴퓨터의 메모리를 이용해서 더 큰 저장소로 이용할 수 있고&lt;/li&gt;
  &lt;li&gt;다수의 코어, 컴퓨터를 이용하여 확장해 갈 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;partitioning-basics-기본-파티셔닝&quot;&gt;Partitioning basics 기본 파티셔닝&lt;/h3&gt;

&lt;p&gt;여러가지 파티셔닝 방법이 있습니다. 예를 들면 레디스 인스턴스 &lt;em&gt;R0, R1, R2, R3&lt;/em&gt; 가 있고 사용자들의 키 &lt;em&gt;user:1, user:2&lt;/em&gt; 가 있을 때 어떤 인스턴스가 어떤 키를 저장하고 있는지를 판별하는 방법이 여러가지가 있습니다.&lt;/p&gt;

&lt;p&gt;가장 단순한 방법 중에 하나는 &lt;strong&gt;range partitioning&lt;/strong&gt; 입니다. 어떤 키가 어떤 인스턴스에 저장되어야 하는지 mapping range 정하는 것입니다. 예를 들어, user 1~10000 는 &lt;em&gt;R0&lt;/em&gt; 에, user 10001~20000 는 &lt;em&gt;R1&lt;/em&gt; 에 저장합니다.&lt;/p&gt;

&lt;p&gt;잘 동작하고 실제 이용되는 방법이기도 하지만 mapping 정보를 별도로 존재해야 한다는 점이 단점입니다. mapping 정보를 따로 관리해야 하고 저장하는 객체마다 해당 정보가 필요합니다. 그래서 다른 파티셔닝 방법에 비해 효율성이 떨어져 권장할 만한 방식은 아닙니다.&lt;/p&gt;

&lt;p&gt;다른 대체 가능한 방법은 &lt;strong&gt;hash partitioning&lt;/strong&gt; 입니다. 키의 형태는 몰라도 되며 아무 형식의 키라도 상관없습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;키를 해쉬 함수(crc32 같은) 을 이용하여 숫자로 변환합니다. 예를 들어 &lt;em&gt;foobar&lt;/em&gt; 같은 키가 &lt;em&gt;93024922&lt;/em&gt; 같은 숫자로 변환됩니다.&lt;/li&gt;
  &lt;li&gt;modulo 연산을 이용해서 어떤 인스턴스에 저장할지 정합니다. 예를 들어 &lt;em&gt;R0~R3&lt;/em&gt; 4개의 인스턴스가 있으므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;93024922 modulo 4&lt;/code&gt; 를 하여 R2 에 저장합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hash partitioning 조금 더 진보된 방식으로 &lt;strong&gt;consistent hashing&lt;/strong&gt; 이 있습니다. 일부 레디스 클라이언트 및 프록시에서 사용하고 있는 방식입니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;h5 id=&quot;이곳에는-consistent-hashing-에-대한-별도-설명이-없습니다&quot;&gt;이곳에는 consistent hashing 에 대한 별도 설명이 없습니다.&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;different-implementations-of-partitioning-파티셔닝의-여러가지-구현방법&quot;&gt;Different implementations of partitioning 파티셔닝의 여러가지 구현방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Client side partitioning&lt;/strong&gt; 은 클라이언트가 바로 인스턴스를 선택하는 방식입니다. 많은 레디스 클라이언트에서 이 방식을 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Proxy assisted partitioning&lt;/strong&gt; 은 클라이언트가 레디스 프로토콜을 알고 있는 프록시에게 요청을 보냅니다. 프록시에서는 설정된 파티셔닝 설정에 따라 쓰기/읽기 되어야 할 인스턴스에게 전달하고 클라이언트에게 결과를 전송합니다. &lt;a href=&quot;https://github.com/twitter/twemproxy&quot;&gt;Twemproxy&lt;/a&gt; 에 구현된 방식입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Query routing&lt;/strong&gt; 이란 실행할 명령어를 랜덤하게 선택된 인스턴스로 보내고 해당 인스턴스가 올바른 인스턴스를 선택하는 방식입니다. &lt;em&gt;Redis Cluster&lt;/em&gt; 에서 Query routing 을 조합한 방식을 구현하고 있습니다. 인스턴스에서 인스턴스로 보내지 않고 인스턴스에서 클라인언트로 전달하여 클라이언트에서 최종 인스턴스에게 전달하는 방식입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;disadvantages-of-partitioning-파티셔닝의-단점&quot;&gt;Disadvantages of partitioning 파티셔닝의 단점&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;h5 id=&quot;레디스에서-파티셔닝-사용-시-발생할-수-있는-단점들&quot;&gt;레디스에서 파티셔닝 사용 시 발생할 수 있는 단점들&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;multiple keys 명령들은 대개 지원하지 않습니다. 예를 들면 두개의 set 에 대해 서로 다른 인스턴스에 저장되어 있는 경우 교집합을 구할 수 없습니다. (할 수는 있지만 직접적인 방법은 없습니다)&lt;/li&gt;
  &lt;li&gt;multiple kyes 에 대한 Redis transaction 을 지원하지 않습니다.&lt;/li&gt;
  &lt;li&gt;파티셔닝은 키를 기반이므로 하나의 키가 대량의 정보를 가지고 있는 경우는 분할될 수 없습니다.&lt;/li&gt;
  &lt;li&gt;파티셔닝 이용 시에는 데이터 관리가 쉽지 않아 집니다. 다수의 RDB / AOF 파일을 관리해야 하므로 데이터 백업을 위해서는 여러 인스터스, 호스트로 나눠져 있는 파일을 하나로 합쳐야 하는 어려움이 있습니다.&lt;/li&gt;
  &lt;li&gt;인스턴스 추가/삭제가 복잡할 수 있습니다. Redis Cluster 는 노드의 추가/삭제로 인한 데이터 리밸런싱의 투명성을 대부분 보장하지만 클라이언트 측의 파티셔닝이나 프록시의 경우 해당 기능을 보장하지 않습니다. 하지만 &lt;em&gt;Pre-sharding&lt;/em&gt; 기법으로 해결될 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-store-or-cache-데이터-저장소로-사용될-때와-캐시로-사용될-때&quot;&gt;Data store or cache? 데이터 저장소로 사용될 때와 캐시로 사용될 때&lt;/h3&gt;
&lt;p&gt;데이터 저장소로 이용되거나 캐시로 이용되거나 파티셔닝 방식에는 차이가 없습니다. 하지만 데이터 저장소로 이용될 때에는 어떤 주어진 키에 대해서 항상 동일한 인스턴스로 연결되어야 한다는 제한이 있습니다. 캐시로 이용될 때는 특정 노드가 사용불가한 상태라도 큰 문제가 되지 않습니다. 그냥 다른 노드를 이용하면 되고 이런 키 - 인스턴스 매핑 정보의 변경은 시스템의 가용성(availability)을 높여주는 방식입니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;h5 id=&quot;availability--요청온-명령에-응답하는-능력&quot;&gt;availability : 요청온 명령에 응답하는 능력&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Consistent hashing&lt;/em&gt; 방식에서는 필요한 노드하나가 사용 가능하지 않을 때 다른 노드로의 변환이 발생합니다. 새로운 노드가 추가되었을 때도 일부 새로운 키가 새로운 노드에 저장되게 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;캐시로 이용될 때에는 &lt;em&gt;consistent hashing&lt;/em&gt; 을 이용한 &lt;strong&gt;확장이 쉽습니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;데이터 저장소로 이용될 때는 키-인스턴스 맵을 고정하므로 노드의 갯수도 고정되어야 하므로 해당 매핑 정보는 &lt;strong&gt;변경될 수 없습니다.&lt;/strong&gt; 꼭 변경해야 한다면 노드가 추가/삭제 될 때 키에 대한 리밸런싱 작업이 필요합니다. 현재 Redis Cluster 만 가능한 기능이며, Redis Cluster 는 2015년 4월 1일부터 사용 가능한 상태입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;presharding-프리샤딩&quot;&gt;Presharding 프리샤딩&lt;/h3&gt;
&lt;p&gt;위에서 이야기했다시피 레디스를 데이터 저장소로 이용하는 경우 노드의 추가/삭제가 까다로운 작업이며 고정된 키-인스턴스 맵 정보를 사용하는 게 제일 단순한 방법임을 알게 되었습니다.&lt;/p&gt;

&lt;p&gt;하지만 데이터 저장소 이용할 때도 변동이 생깁니다. 오늘은 10개의 노드만 필요했지만 내일은 30개의 노드가 필요할지도 모르지요.&lt;/p&gt;

&lt;p&gt;레디스는 초초경량이므로(여유분의 인스턴스가 오직 1MB만 사용합니다.), 가장 단순한 접근 방법은 처음부터 많은 량의 인스턴스로 시작하는 것입니다. 하나의 서버만 있다고 하더라도 파티셔닝을 이용하여 분산처리 하기로 마음먹을 수도 있습니다. 그리고 처음부터 확장성을 고려해 32/64 개의 넉넉한 인스턴스를 확보하는 것입니다.&lt;/p&gt;

&lt;p&gt;이렇게 하는 경우 데이터 저장소의 확장이 필요한 경우 그저 기존에 만들어진 인스턴스를 다른 레디스 서버로 이동할 수 있습니다. 새로운 레디스 서버가 추가되면 기존의 절반의 인스턴스를 옮길 수 있습니다.&lt;/p&gt;

&lt;p&gt;Redis replication 을 이용하는 경우 최소한의 혹은 서비스 중단 없이 데이터를 이동할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;implementations-of-redis-partitioning-파티셔닝-구현&quot;&gt;Implementations of Redis partitioning 파티셔닝 구현&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;h5 id=&quot;그래서-어떤-거-쓰라는&quot;&gt;그래서 어떤 거 쓰라는…?&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;redis-cluster&quot;&gt;Redis Cluster&lt;/h3&gt;
&lt;p&gt;Redis Cluster 에서는 자동 샤딩과 높은 가용성을 얻을 수 있습니다. Redis Cluster 는 &lt;em&gt;query routing&lt;/em&gt; 과 &lt;em&gt;client side partitioning&lt;/em&gt; 방식을 혼합해서 사용하고 있습니다. &lt;a href=&quot;https://redis.io/topics/cluster-tutorial&quot;&gt;Cluster tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;twemproxy&quot;&gt;Twemproxy&lt;/h3&gt;
&lt;p&gt;트위터에서 개발한 멤캐시와 레디스 프로토콜을 위한 프록시 입니다. 싱글 스레드로 운영되고 C로 작성되어 있으며 완전 빠릅니다. (Apache 2.0 license)&lt;/p&gt;

&lt;p&gt;Twemproxy 는 여러대의 레디스 인스턴스에 대해 자동 샤딩을 지원하며 노드가 사용가능하지 않을 때 노드 제거 기능을 제공합니다. 이 기능은 키-인스턴스의 변경이 일어나므로 레디스를 캐시로 이용할 때만 이용해야 하는 기능입니다.&lt;/p&gt;

&lt;p&gt;기본적으로 Twemproxy는 클라이언트와 레디스 인스턴스를 이어주는 중간 다리역할을 합니다. 그 중간에서 파티셔닝을 제어합니다. &lt;a href=&quot;http://antirez.com/news/44&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;consistent-hashing-을-제공하는-클라이언트&quot;&gt;Consistent hashing 을 제공하는 클라이언트&lt;/h3&gt;
&lt;p&gt;Twemproxy을 대체할 만한 다른 방법은 &lt;em&gt;consistent hashing&lt;/em&gt; 이나 비슷한 알고리즘을 구현한 다른 Redis Client 를 이용하는 것입니다. 예를 들면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Redis-rb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Predis&lt;/code&gt; 같은 것들이 있습니다. &lt;a href=&quot;https://redis.io/clients&quot;&gt;이곳&lt;/a&gt;에서 &lt;em&gt;consistent hashing&lt;/em&gt; 을 구현한 클라이언트가 있는지 찾아 볼 수 있습니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">comes from here</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/10/11/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-10-11T23:24:00+09:00</published><updated>2018-10-11T23:24:00+09:00</updated><id>http://localhost:4000/jekyll/update/2018/10/11/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/10/11/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>